version: '3.2'

services:

#-------------------------------------------
# ADMINER
#-------------------------------------------
  adminer:
    restart: always
    build:
      context: ./docker/adminer
    ports:
      - "${ADMINER_PORT}:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SESSION_ADMINER}:/sessions                       # volume for data
    networks:
      - backend

#-------------------------------------------
# MARIADB
#-------------------------------------------
  mariadb:
    restart: always
    build:
      context: ./docker/mariadb/${MARIADB_VERSION}
    ports:
      - "${MARIADB_PORT}:3306"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATABASE_MARIADB}:/var/lib/mysql                 # volume for data
      - ${LOG_MARIADB}:/var/log/mysql                      # log mariadb
    environment:
      - MARIADB_VERSION=${MARIADB_VERSION}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}     # root password
      - MARIADB_ROOT_HOST=${MARIADB_ROOT_HOST}             # grant user hostmask (optional)
      - MARIADB_DATABASE=${MARIADB_DATABASE}               # create database (optional)
      - MARIADB_USER=${MARIADB_USER}                       # grant user name (optional)
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}               # grant user password (optional)
    networks:
      - backend

#-------------------------------------------
# MONGODB
#-------------------------------------------
  mongodb:
    restart: always
    build:
      context: ./docker/mongodb/${MONGO_VERSION}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_MONGODB}:/etc/mongodb.conf
      - ${DATABASE_MONGODB}/db:/data/db                    # volume for data
      - ${DATABASE_MONGODB}/configdb:/data/configdb        # volume for config
      - ${DATABASE_MONGODB}:/var/lib/mongodb
      - ${LOG_MONGODB}:/var/log/mongodb/mongod.log         # log mongodb
    environment:
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_HOST=${MONGO_INITDB_ROOT_HOST}
      - MONGO_DATABASE=${MONGO_DATABASE}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    networks:
      - backend

#-------------------------------------------
# MYSQL
#-------------------------------------------
  mysql:
    restart: always
    build:
      context: ./docker/mysql/${MYSQL_VERSION}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATABASE_MYSQL}:/var/lib/mysql                      # volume for data
      - ${LOG_MYSQL}:/var/log/mysql                           # log mysql
      - ${CONFIG_MYSQL}:/etc/my.cnf                           # my.cnf mysql
      - ${CONFIG_MYSQL_DOCKER}:/etc/mysql/conf.d/docker.cnf   # docker.cnf mysql
    environment:
      - MYSQL_VERSION=${MYSQL_VERSION}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}         # root password
      - MYSQL_ROOT_HOST=${MYSQL_ROOT_HOST}                 # grant user hostmask (optional)
      - MYSQL_DATABASE=${MYSQL_DATABASE}                   # create database (optional)
      - MYSQL_USER=${MYSQL_USER}                           # grant user name (optional)
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}                   # grant user password (optional)
    networks:
      - backend

#-------------------------------------------
# NGINX
#-------------------------------------------
  nginx:
    restart: always
    build:
      context: ./docker/nginx
    links:
      - ruby
    ports:
      - "${NGINX_HTTP_PORT}:80"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_NGINX}/nginx.conf:/etc/nginx/nginx.conf                        # config nginx
      - ${CONFIG_NGINX_PUMA}/staging:/etc/nginx/site-enabled/staging            # config staging
      #- ${CONFIG_NGINX_PUMA}/staging-ssl:/etc/nginx/site-enabled/staging-ssl   # config staging-ssl
      - ${LOG_NGINX}:/var/log/nginx                                             # log nginx
      #- ${WORKSPACE}:/var/www/html                                             # volume for data
    environment:
      - NGINX_VERSION=${NGINX_VERSION}
    networks:
      - backend

#-------------------------------------------------------------------
# POSTGRESQL
#-------------------------------------------------------------------
  postgresql:
    restart: always
    build:
      context: ./docker/postgresql/${POSTGRES_VERSION}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATABASE_POSTGRESQL}/postgres:/var/lib/postgresql          # volume for data
    environment:
      - POSTGRES_VERSION=${POSTGRES_VERSION}
      - POSTGRES_ROOT_HOST=${POSTGRES_ROOT_HOST}                     # grant user hostmask (optional)
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}                       # create database (optional)
      - POSTGRES_USER=${POSTGRES_USER}                               # grant user name (optional)
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}                       # grant user password (optional)
    networks:
      - backend

#-------------------------------------------
# RUBY
#-------------------------------------------
  ruby:
    restart: always
    build:
      context: ./docker/ruby
    ports:
      - "${RUBY_PORT}:22"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${WORKSPACE}:/home/docker/workspace
    environment:
      - RUBY_VERSION=${RUBY_VERSION}
    networks:
      - backend

#-------------------------------------------------------------------
# REDIS
#-------------------------------------------------------------------
  redis:
    restart: always
    build:
      context: ./docker/redis
    links:
      - ruby
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CACHE_REDIS}:/var/lib/redis            # volume for data
    environment:
      - REDIS_VERSION=${REDIS_VERSION}
    networks:
      - backend

#-------------------------------------------------------------------
# VIM
#-------------------------------------------------------------------
  vim:
    restart: always
    build:
      context: ./docker/vim
    links:
      - ruby
    ports:
      - "${VIM_PORT}:22"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - VIM_VERSION=${VIM_VERSION}
      - LUA_VERSION=${LUA_VERSION}
      - LUAROCKS_VERSION=${LUAROCKS_VERSION}
    networks:
      - backend

#-------------------------------------------------------------------
# NETWORK SETUP
#-------------------------------------------------------------------
networks:
  backend:
    driver: "bridge"

#-------------------------------------------------------------------
# VOLUME SETUP
#-------------------------------------------------------------------
volumes:
  adminer:
    driver: "local"
  mariadb:
    driver: "local"
  mongodb:
    driver: "local"
  mysql:
    driver: "local"
  nginx:
    driver: "local"
  postgresql:
    driver: "local"
  ruby:
    driver: "local"
  redis:
    driver: "local"
  vim:
    driver: "local"
